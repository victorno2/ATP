#include <stdlib.h>
#include <ATP.h>
#include <ATPSearch.h>
#include <ATPConfigSearch.h>
#include <ga.h>

using namespace ATP;

base_layer_t<float> *conv2_x(base_layer_t<float> *bottom, bool increase_dim) {
    // fork
    base_layer_t<float> *fork = (base_layer_t<float> *) new fork_layer_t<float>();
    // join
    base_layer_t<float> *join = (base_layer_t<float> *) new join_layer_t<float>();

    bottom->hook(fork);

    // left part
    if (increase_dim) {
        base_layer_t<float> *conv_left = (base_layer_t<float> *) new conv_layer_t<float>(256, 1, 1, 0, 0,
                                                                                         new xavier_initializer_t<float>(),
                                                                                         false);
        base_layer_t<float> *bn_left = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
                CUDNN_BATCHNORM_SPATIAL, 0.001);

        fork->hook(conv_left);
        conv_left->hook(bn_left);
        bn_left->hook(join);
    } else {
        fork->hook(join);
    }


    // right part
    base_layer_t<float> *conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(64, 1, 1, 0, 0,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right1 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right1 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right2 = (base_layer_t<float> *) new conv_layer_t<float>(64, 3, 1, 1, 1,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right2 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right2 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right3 = (base_layer_t<float> *) new conv_layer_t<float>(256, 1, 1, 0, 0,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right3 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);


    //right part
    fork->hook(conv_right1);
    conv_right1->hook(bn_right1);
    bn_right1->hook(act_right1);
    act_right1->hook(conv_right2);
    conv_right2->hook(bn_right2);
    bn_right2->hook(act_right2);
    act_right2->hook(conv_right3);
    conv_right3->hook(bn_right3);
    bn_right3->hook(join);

    base_layer_t<float> *act = (base_layer_t<float> *) new act_layer_t<float>(CUDNN_ACTIVATION_RELU,
                                                                              CUDNN_NOT_PROPAGATE_NAN);
    join->hook(act);
    return act;

}

base_layer_t<float> *conv3_x(base_layer_t<float> *bottom, bool increase_dim) {

    // fork
    base_layer_t<float> *fork = (base_layer_t<float> *) new fork_layer_t<float>();
    // join
    base_layer_t<float> *join = (base_layer_t<float> *) new join_layer_t<float>();

    bottom->hook(fork);

    if (increase_dim) {

        // left part
        base_layer_t<float> *conv_left = (base_layer_t<float> *) new conv_layer_t<float>(512, 1, 2, 0, 0,
                                                                                         new xavier_initializer_t<float>(),
                                                                                         false);
        base_layer_t<float> *bn_left = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
                CUDNN_BATCHNORM_SPATIAL, 0.001);
        fork->hook(conv_left);
        conv_left->hook(bn_left);
        bn_left->hook(join);
    } else {
        fork->hook(join);
    }


    // right part

    base_layer_t<float> *conv_right1;

    if (increase_dim) {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(128, 1, 2, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    } else {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(128, 1, 1, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    }


    base_layer_t<float> *bn_right1 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right1 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right2 = (base_layer_t<float> *) new conv_layer_t<float>(128, 3, 1, 1, 1,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right2 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right2 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right3 = (base_layer_t<float> *) new conv_layer_t<float>(512, 1, 1, 0, 0,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right3 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);


    //right part
    fork->hook(conv_right1);
    conv_right1->hook(bn_right1);
    bn_right1->hook(act_right1);
    act_right1->hook(conv_right2);
    conv_right2->hook(bn_right2);
    bn_right2->hook(act_right2);
    act_right2->hook(conv_right3);
    conv_right3->hook(bn_right3);
    bn_right3->hook(join);
    base_layer_t<float> *act = (base_layer_t<float> *) new act_layer_t<float>(CUDNN_ACTIVATION_RELU,
                                                                              CUDNN_NOT_PROPAGATE_NAN);
    join->hook(act);
    return act;

}

base_layer_t<float> *conv4_x(base_layer_t<float> *bottom, bool increase_dim) {
    // fork
    base_layer_t<float> *fork = (base_layer_t<float> *) new fork_layer_t<float>();
    // join
    base_layer_t<float> *join = (base_layer_t<float> *) new join_layer_t<float>();

    bottom->hook(fork);


    if (increase_dim) {
        // left part
        base_layer_t<float> *conv_left = (base_layer_t<float> *) new conv_layer_t<float>(1024, 1, 2, 0, 0,
                                                                                         new xavier_initializer_t<float>(),
                                                                                         false);
        base_layer_t<float> *bn_left = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
                CUDNN_BATCHNORM_SPATIAL, 0.001);
        fork->hook(conv_left);
        conv_left->hook(bn_left);
        bn_left->hook(join);
    } else {
        fork->hook(join);
    }


    // right part

    base_layer_t<float> *conv_right1;

    if (increase_dim) {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(256, 1, 2, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    } else {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(256, 1, 1, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    }

    base_layer_t<float> *bn_right1 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right1 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right2 = (base_layer_t<float> *) new conv_layer_t<float>(256, 3, 1, 1, 1,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right2 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right2 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right3 = (base_layer_t<float> *) new conv_layer_t<float>(1024, 1, 1, 0, 0,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right3 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);

    //right part
    fork->hook(conv_right1);
    conv_right1->hook(bn_right1);
    bn_right1->hook(act_right1);
    act_right1->hook(conv_right2);
    conv_right2->hook(bn_right2);
    bn_right2->hook(act_right2);
    act_right2->hook(conv_right3);
    conv_right3->hook(bn_right3);
    bn_right3->hook(join);
    base_layer_t<float> *act = (base_layer_t<float> *) new act_layer_t<float>(CUDNN_ACTIVATION_RELU,
                                                                              CUDNN_NOT_PROPAGATE_NAN);
    join->hook(act);
    return act;

}

base_layer_t<float> *conv5_x(base_layer_t<float> *bottom, bool increase_dim) {
    // fork
    base_layer_t<float> *fork = (base_layer_t<float> *) new fork_layer_t<float>();
    // join
    base_layer_t<float> *join = (base_layer_t<float> *) new join_layer_t<float>();

    bottom->hook(fork);

    // left part
    if (increase_dim) {
        base_layer_t<float> *conv_left = (base_layer_t<float> *) new conv_layer_t<float>(2048, 1, 2, 0, 0,
                                                                                         new xavier_initializer_t<float>(),
                                                                                         false);
        base_layer_t<float> *bn_left = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
                CUDNN_BATCHNORM_SPATIAL, 0.001);
        fork->hook(conv_left);
        conv_left->hook(bn_left);
        bn_left->hook(join);
    } else {
        fork->hook(join);
    }


    // right part
    base_layer_t<float> *conv_right1;

    if (increase_dim) {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(512, 1, 2, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    } else {
        conv_right1 = (base_layer_t<float> *) new conv_layer_t<float>(512, 1, 1, 0, 0,
                                                                      new xavier_initializer_t<float>(),
                                                                      false);
    }

    base_layer_t<float> *bn_right1 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right1 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right2 = (base_layer_t<float> *) new conv_layer_t<float>(512, 3, 1, 1, 1,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right2 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);
    base_layer_t<float> *act_right2 = (base_layer_t<float> *) new act_layer_t<float>();

    base_layer_t<float> *conv_right3 = (base_layer_t<float> *) new conv_layer_t<float>(2048, 1, 1, 0, 0,
                                                                                       new xavier_initializer_t<float>(),
                                                                                       false);
    base_layer_t<float> *bn_right3 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(
            CUDNN_BATCHNORM_SPATIAL, 0.001);



    //right part
    fork->hook(conv_right1);
    conv_right1->hook(bn_right1);
    bn_right1->hook(act_right1);
    act_right1->hook(conv_right2);
    conv_right2->hook(bn_right2);
    bn_right2->hook(act_right2);
    act_right2->hook(conv_right3);
    conv_right3->hook(bn_right3);
    bn_right3->hook(join);
    base_layer_t<float> *act = (base_layer_t<float> *) new act_layer_t<float>(CUDNN_ACTIVATION_RELU,
                                                                              CUDNN_NOT_PROPAGATE_NAN);
    join->hook(act);

    return act;
}

int main(int argc, char **argv) {
    char *train_label_bin;
    char *train_image_bin;
    char *test_label_bin;
    char *test_image_bin;
    char *train_mean_file;
    char *checkpoint;
    int lay_num = 50;
    //int lay_num = 

    cudaSetDevice(static_cast<const size_t>(atoi(argv[1])));
	int deviceId;
	cudaGetDevice(&deviceId);
	printf("cuda device = %d\n", deviceId);

    if (lay_num < 50) {
        fprintf(stderr, "not implement for the layernum=%d\n", lay_num);
        exit(-1);
    }

   // base_solver_t<float> *solver = (base_solver_t<float> *) new nesterov_solver_t<float>(0.1, 0.0004, 0.9);
    base_solver_t<float> *solver = (base_solver_t<float> *) new sgd_solver_t<float>(0.001, 0.0004);
    // solver->set_lr_decay_policy(ITER, {500000, 1000000}, {0.01, 0.001});
    network_t<float> n(solver);

    train_mean_file = (char *) "../dataset/train.mean";
    train_image_bin = (char *) "../dataset/train_data_0.bin";
    train_label_bin = (char *) "../dataset/train_label_0.bin";
    test_image_bin  = (char *) "../dataset/val_data_0.bin";
    test_label_bin  = (char *) "../dataset/val_label_0.bin";

    size_t batch_size = static_cast<const size_t>(atoi(argv[2])); //train and test must be same
    size_t training_iter_time = static_cast<const size_t>(atoi(argv[3])); //train and test must be same
    size_t C = 3, H = 224, W = 224;


    base_preprocess_t<float> *pad = (base_preprocess_t<float> *) new border_padding_t<float>(
            batch_size, C, H, W, 4, 4);
    base_preprocess_t<float> *crop = (base_preprocess_t<float> *) new random_crop_t<float>(
            batch_size, C, H + 8, W + 8, batch_size, C, H, W);
    base_preprocess_t<float> *flip = (base_preprocess_t<float> *) new random_flip_left_right_t<float>(
            batch_size, C, H, W);
    base_preprocess_t<float> *standardization =
            (base_preprocess_t<float> *) new per_image_standardization_t<float>(
                    batch_size, C, H, W);

    base_preprocess_t<float> *mean_sub =
            (base_preprocess_t<float> *) new mean_subtraction_t<float>(batch_size, C, H, W, train_mean_file);

    preprocessor<float> *p = new preprocessor<float>();

    parallel_reader_t<float>* reader1 = new parallel_reader_t<float>(train_image_bin, train_label_bin, 2, batch_size, C, H, W, p, 1, 1);
    base_layer_t<float> *data_train = (base_layer_t<float> *) new data_layer_t<float>(DATA_TRAIN, reader1);

    base_layer_t<float> *conv_1 = (base_layer_t<float> *) new conv_layer_t<float>(64, 7, 2, 3, 3,
                                                                                  new xavier_initializer_t<float>(),
                                                                                  false);
    base_layer_t<float> *bn_1 = (base_layer_t<float> *) new batch_normalization_layer_t<float>(CUDNN_BATCHNORM_SPATIAL,
                                                                                               0.001);
    base_layer_t<float> *act_1 = (base_layer_t<float> *) new act_layer_t<float>(CUDNN_ACTIVATION_RELU,
                                                                                CUDNN_NOT_PROPAGATE_NAN);

    base_layer_t<float> *pool_1 = (base_layer_t<float> *) new pool_layer_t<float>(
            CUDNN_POOLING_MAX, CUDNN_NOT_PROPAGATE_NAN, 2, 2, 3, 3);

    data_train->hook(conv_1);
    conv_1->hook(bn_1);
    bn_1->hook(act_1);
    act_1->hook(pool_1);

    base_layer_t<float> *net = pool_1;
    for (int i = 0; i < 3; i++) {
        if (i == 0) {
            net = conv2_x(net, true);
        } else {
            net = conv2_x(net, false);
        }
    }

    for (int i = 0; i < 8; i++) {
        if (i == 0) {
            net = conv3_x(net, true);
        } else {
            net = conv3_x(net, false);
        }
    }

    for (int i = 0; i < 156; i++) {  // 326
        if (i == 0) {
            net = conv4_x(net, true);
        } else {
            net = conv4_x(net, false);
        }
    }

    for (int i = 0; i < 3; i++) {
        if (i == 0) {
            net = conv5_x(net, true);
        } else {
            net = conv5_x(net, false);
        }
    }

    base_layer_t<float> *pool_2 = (base_layer_t<float> *) new pool_layer_t<float>(
            CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING, CUDNN_NOT_PROPAGATE_NAN, 1, 1, 7, 7);

    // 2048 x 1024
    base_layer_t<float> *full_conn_1 = (base_layer_t<float> *) new fully_connected_layer_t<float>(5,
                                                                                                  new xavier_initializer_t<float>(),
                                                                                                  true);
    base_layer_t<float> *softmax = (base_layer_t<float> *) new softmax_layer_t<float>(CUDNN_SOFTMAX_ACCURATE,
                                                                                      CUDNN_SOFTMAX_MODE_INSTANCE);


    net->hook(pool_2);
    pool_2->hook(full_conn_1);
    full_conn_1->hook(softmax);

    printf("after hook network, memory cost = %zd =  %f\n", query_used_mem(), BYTE_TO_MB(query_used_mem()));
    size_t one_batch_inherent_size = 769;
    double inherent_size_step = 0;

#ifdef BEST_BATCHSIZE
    const size_t baseline_batchsize = static_cast<const size_t>(atoi(argv[2]));
    const size_t batchsize_step = static_cast<const size_t>(atoi(argv[3]));
	const size_t max_batchsize = static_cast<const size_t>(atoi(argv[4]));
    const size_t ga_iter_times = static_cast<const size_t>(atoi(argv[5]));
    const size_t population_size = static_cast<const size_t>(atoi(argv[6]));
    const size_t batch_size_num = (max_batchsize - baseline_batchsize) / batchsize_step + 1;

    std::map<int, size_t> modnn_offload_size;
    ATPSearch<float> *swap_net = new ATPSearch<float>(&n);
    // size_t gpu_mem = 17179869184;  // 16GB
    size_t gpu_mem = 33973862400;  // 32GB
    // double pcie_bandwidth = 11823420144;  // 
    double pcie_bandwidth = 11823420144;
    double max_throughput;
    size_t best_shape[4];
    size_t min_offloadsize;
	swap_net->set_simulator(gpu_mem, pcie_bandwidth);
    size_t iter_times = 2;
    size_t no_update_win = 3;

    ThroughputPeakSearch(  data_train, softmax, &n, p, reader1, gpu_mem, pcie_bandwidth, 
                baseline_batchsize, max_batchsize, batchsize_step, iter_times, no_update_win, false,
                population_size, 0.0005, 100);

#else

    n.init_network_trainning(
            batch_size, 0, 
			p,
			reader1,
		    data_train, softmax,
		    train_image_bin, train_label_bin, train_mean_file);

#ifdef ATP_SOLUTION
    const size_t code_size = 2056;
    /* ATP: batchsize = 40 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 50 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,0,1,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,1,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,0,0,0,1,1,0,0,1,2,2,2,0,0,1,1,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,1,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,1,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,1,0,0,0,1,0,0,0,2,2,2,1,0,0,1,0,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,1,1,0,0,1,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,1,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,1,1,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,1,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,1,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,1,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,1,2,2,2,1,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,1,0,0,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,0,0,0,0,1,1,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,1,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,1,1,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,1,0,0,1,1,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,1,0,0,0,2,2,2,1,0,0,1,0,0,0,1,0,2,2,2,0,1,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,1,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,1,1,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,0,1,1,0,0,1,0,0,2,2,2,0,1,0,0,0,0,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,1,0,0,0,1,0,0,1,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,1,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 52 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,0,0,0,0,2,0,0,2,0,1,0,2,2,2,0,1,2,0,0,2,0,1,0,2,2,2,0,1,2,0,0,2,0,1,0,2,2,2,0,0,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,1,0,0,0,1,2,0,0,0,2,2,2,0,0,2,0,0,0,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,1,1,2,0,1,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,2,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,1,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,1,2,2,2,0,0,2,1,0,0,1,1,0,2,2,2,0,0,0,0,1,1,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,1,1,0,0,0,0,0,1,2,2,2,1,0,2,0,1,0,0,0,0,2,2,2,0,0,1,0,0,2,0,1,0,2,2,2,0,0,0,0,0,2,1,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,0,0,2,0,0,0,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,1,0,0,0,0,2,0,0,1,2,2,2,0,0,0,1,0,2,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,1,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,1,1,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,1,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,1,1,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,0,0,0,0,0,2,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,0,1,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,1,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,2,1,1,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,0,0,0,1,0,2,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,1,0,0,0,1,0,0,1,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,1,0,2,0,0,1,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,1,0,2,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,2,0,0,0,0,0,0,2,2,2,0,1,0,0,1,1,0,0,1,2,2,2,0,0,0,1,0,2,0,1,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,2,0,1,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,1,2,0,0,0,0,0,0,2,2,2,0,0,0,0,1,0,0,1,0,2,2,2,0,0,0,0,0,2,1,1,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,2,0,1,0,0,0,0,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,1,0,0,1,0,2,0,0,0,2,2,2,0,0,2,1,0,0,0,0,0,2,2,2,0,1,0,0,0,1,0,0,1,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,2,0,1,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,1,0,2,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,1,0,0,1,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,1,0,0,1,2,2,2,0,0,0,1,0,2,0,1,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,1,0,0,2,2,2,0,0,0,0,1,0,0,1,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,1,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 55 * 3 * 224 * 224 */
    int rs_code[code_size] = {0,1,1,1,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,1,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,1,0,2,0,0,0,2,2,2,0,0,2,0,1,0,0,0,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,0,0,1,0,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,1,0,0,1,0,0,1,1,2,2,2,0,0,1,0,0,2,0,1,0,2,2,2,0,0,0,0,0,1,0,0,1,2,2,2,0,0,0,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,1,1,2,2,2,0,0,1,0,0,1,0,0,0,2,2,2,1,0,0,1,1,0,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,1,0,0,0,0,2,0,1,1,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,0,0,0,1,1,0,0,2,2,2,1,0,0,0,0,0,0,1,1,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,1,0,2,2,2,0,0,1,0,0,2,1,0,0,2,2,2,0,1,0,1,1,0,1,1,0,2,2,2,0,0,1,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,2,1,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,0,0,2,0,1,0,0,0,1,2,2,2,0,0,1,0,0,2,0,1,0,2,2,2,0,1,1,0,0,2,0,0,0,2,2,2,1,0,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,2,0,0,1,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,0,0,0,0,1,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,0,0,1,0,0,1,0,2,2,2,0,0,0,0,0,2,0,1,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,0,0,0,0,0,2,0,0,1,2,2,2,0,0,2,1,1,2,0,0,1,2,2,2,0,0,1,0,1,0,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,1,0,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,0,1,0,2,0,0,1,2,2,2,0,0,2,0,1,0,0,1,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,2,1,0,0,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,1,2,1,1,0,0,1,0,2,2,2,0,0,1,0,1,2,0,0,1,2,2,2,0,1,0,0,1,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,1,0,0,1,0,0,2,2,2,0,0,2,0,0,1,0,0,1,2,2,2,0,0,0,0,0,0,0,1,0,2,2,2,0,1,0,0,1,0,0,0,0,2,2,2,1,0,0,0,1,0,0,1,1,2,2,2,0,0,1,0,0,2,0,1,0,2,2,2,0,0,0,0,1,1,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,0,0,1,0,2,0,0,1,2,2,2,0,0,0,0,0,1,0,0,0,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,1,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,1,0,0,0,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,1,0,0,1,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,1,2,2,2,0,0,1,1,0,0,1,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,2,0,1,0,0,0,1,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,2,1,1,2,0,0,0,2,2,2,0,0,1,1,0,0,0,0,0,2,2,2,1,0,0,0,1,2,0,0,0,2,2,2,1,0,0,0,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,1,2,2,2,0,0,1,0,0,2,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,0,2,1,1,0,2,2,2,0,0,0,0,1,0,0,0,1,2,2,2,0,0,1,0,0,0,0,0,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,0,0,0,1,0,2,0,0,0,2,2,2,0,0,1,0,0,0,1,0,0,2,2,2,1,1,0,0,0,2,0,0,1,2,2,2,0,0,0,1,0,0,1,1,0,2,2,2,0,0,0,0,1,2,1,0,0,2,2,2,0,0,0,1,1,0,0,1,0,2,2,2,0,1,1,0,0,2,0,0,0,2,2,2,0,0,0,1,0,2,0,1,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,1,0,2,0,0,1,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,1,1,0,1,1,2,0,0,1,2,2,2,0,0,0,0,0,2,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,1,0,0,0,0,0,1,1,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,1,0,0,2,2,2,0,0,0,0,1,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,1,0,2,0,1,0,2,2,2,1,0,0,0,0,2,0,0,1,2,2,2,0,0,0,1,0,2,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,1,0,0,1,2,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,1,0,0,2,0,0,0,2,2,2,0,1,1,0,0,2,0,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,0,0,0,0,2,2,2,1,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0,0,2,0,0,2,1,0,0,2,2,2,1,0,0,0,1,0,0,0,0,2,2,2,0,0,2,1,0,0,1,1,0,2,2,2,0,1,0,0,0,2,1,0,0,2,2,2,0,0,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,2,0,0,0,2,2,2,0,0,0,0,1,2,0,0,0,2,2,2,0,0,0,1,0,1,1,0,0,2,2,2,0,0,0,1,1,2,0,0,0,2,2,2,0,0,1,0,0,1,0,0,0,1,0,2,2,2,0,1,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 60 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,0,0,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,1,0,0,2,2,2,0,0,0,1,2,1,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,1,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,0,0,2,0,1,2,0,2,0,2,2,2,0,1,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,2,1,2,2,2,0,0,2,1,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,1,2,1,0,2,0,0,0,2,2,2,0,1,2,1,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,1,2,1,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,1,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,1,1,2,2,2,0,0,2,0,0,2,0,1,1,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,0,2,0,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,1,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,1,2,2,2,0,0,2,0,1,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,1,1,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,1,2,2,2,0,0,2,0,0,2,0,2,1,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,1,2,1,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,1,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,1,2,0,0,2,1,0,0,2,2,2,1,0,2,0,0,2,0,1,0,2,2,2,1,1,0,0,0,2,1,2,0,2,2,2,0,1,2,0,0,2,1,1,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,1,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,1,2,0,1,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,1,2,0,2,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,1,2,1,0,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,1,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,0,2,2,2,0,0,2,1,1,2,0,0,0,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,0,1,2,0,0,2,0,0,0,2,2,2,0,1,2,0,1,2,1,2,0,2,2,2,0,1,2,1,0,2,1,1,0,2,2,2,1,0,2,1,0,2,0,1,0,2,2,2,1,1,2,0,0,2,0,0,0,2,2,2,0,1,2,1,0,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,1,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,1,2,1,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,1,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,1,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,1,0,2,0,1,0,2,2,2,0,0,2,0,0,2,0,1,0,2,2,2,0,0,0,0,0,2,0,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,1,0,2,0,0,2,1,0,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,1,2,2,2,0,0,2,1,1,2,0,0,1,2,2,2,0,0,2,1,1,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,0,1,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,1,0,2,0,0,1,2,2,2,1,0,2,0,1,2,0,0,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,1,2,0,0,2,0,0,0,2,2,2,0,0,2,0,0,2,1,0,0,2,2,2,0,1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,1,1,2,2,2,0,0,1,0,0,1,0,0,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 80 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,0,1,0,0,2,0,0,2,0,0,1,2,2,2,0,0,2,1,0,2,0,0,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,1,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,1,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,1,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,1,0,2,1,0,2,0,2,0,2,2,2,1,1,2,0,1,2,1,2,0,2,2,2,0,1,2,1,0,2,0,2,1,2,2,2,0,0,2,0,0,2,1,2,1,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,1,2,0,0,2,0,2,0,2,2,2,0,2,2,1,1,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,1,2,2,2,0,0,2,1,1,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,1,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,1,0,2,0,1,2,0,2,0,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,0,2,2,0,0,2,1,2,0,2,2,2,0,2,2,0,1,2,0,2,0,2,2,2,0,2,2,1,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,1,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,2,2,1,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,1,2,1,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,1,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,1,1,2,0,0,2,1,2,0,2,2,2,1,1,2,0,0,2,1,2,0,2,2,2,0,2,2,0,1,2,0,2,0,2,2,2,1,2,2,1,0,2,0,2,1,2,2,2,0,1,2,0,1,2,0,2,1,2,2,2,0,2,2,0,1,2,1,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,1,2,1,0,2,0,2,1,2,2,2,1,0,2,1,1,2,0,2,0,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,2,2,0,1,2,0,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,1,2,1,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,0,2,1,0,2,1,2,0,2,2,2,0,0,2,0,1,2,1,2,0,2,2,2,1,2,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,1,0,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,2,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,0,2,2,0,1,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,0,2,0,1,2,1,2,0,2,2,2,0,2,2,0,0,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,1,1,2,0,0,2,0,2,0,2,2,2,1,0,2,0,1,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,2,1,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,2,2,1,0,2,0,2,1,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,0,2,1,0,2,1,2,0,2,2,2,0,0,2,1,1,2,0,2,1,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,1,2,0,0,2,0,2,0,2,2,2,1,2,2,0,0,2,1,2,0,2,2,2,0,1,2,1,0,2,0,2,1,2,2,2,0,2,2,0,0,2,1,2,0,2,2,2,0,2,2,1,0,2,0,2,0,2,2,2,0,2,2,0,1,2,1,0,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,1,2,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,0,2,2,0,0,2,0,2,1,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,1,2,2,1,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,1,2,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,2,2,2,0,0,2,1,0,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,0,2,2,2,0,1,2,1,0,2,0,2,0,2,2,2,0,0,2,1,1,2,0,2,0,2,2,2,1,2,2,0,0,2,0,2,1,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,0,1,2,0,0,2,0,2,1,2,2,2,0,2,2,0,0,2,1,2,0,2,2,2,0,2,2,1,0,2,0,2,0,2,2,2,1,0,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,1,2,1,2,2,2,0,2,2,0,1,2,0,0,1,2,2,2,0,2,2,0,0,2,0,2,0,2,2,2,0,1,2,0,0,2,0,2,0,2,2,2,1,2,2,0,1,2,1,2,0,2,2,2,0,2,2,0,0,2,0,0,0,2,2,2,0,0,2,0,1,2,0,2,1,2,2,2,1,0,2,0,0,2,1,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,0,0,2,1,0,2,0,2,1,2,2,2,1,2,2,0,0,2,1,2,0,2,2,2,0,1,2,1,0,2,0,2,0,2,2,2,1,0,2,0,1,2,0,2,0,2,2,2,1,1,2,0,0,2,0,2,0,2,2,2,0,0,2,0,1,2,0,2,0,2,2,2,0,0,2,0,0,2,1,2,0,2,2,2,1,1,2,0,0,2,0,2,0,2,2,2,0,2,1,0,2,0,0,2,0,2,0,2,2,2,1,0,2,1,0,2,0,2,1,2,2,2,0,0,2,1,0,2,0,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 100 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,0,0,0,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,0,1,2,2,0,2,1,2,2,2,0,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 105 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 120 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,1,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 140 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,0,2,1,2,2,2,1,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 160 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,1,2,2,0,2,2,1,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,1,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,0,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,1,2,2,0,2,2,1,2,1,2,2,2,0,2,2,0,2,2,0,2,1,2,2,2,0,2,2,1,2,2,0,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 180 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,0,2,2,1,2,2,0,2,0,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,0,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,1,2,0,2,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,0,2,2,0,2,1,2,2,2,0,2,2,0,2,2,0,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,0,2,2,0,2,2,0,2,1,2,2,2,1,2,2,1,2,2,1,2,0,2,2,2,0,2,2,0,2,2,0,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 200 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 220 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,1,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 240 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,0,2,2,0,2,2,2,2,1,2,2,2,0,2,2,0,2,2,2,2,1,2,2,2,1,2,2,0,2,2,2,2,0,1,1,1,0};
    /*********************************************/
    /* ATP: batchsize = 260 * 3 * 224 * 224 */
    // int rs_code[code_size] = {0,1,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,0,2,2,2,2,1,2,2,2,1,2,2,1,2,2,2,2,0,1,1,1,0,};
    /*********************************************/
    if (n.SetRecomputeSwapTensorsbyRoute(rs_code, code_size)) {
        printf("SetRecomputeSwapTensorsbyRoute down\n");
    }
    else {
        exit(0);
    }
#endif  

    const size_t train_imgs = 50000;
    const size_t tracking_window = train_imgs / batch_size;
    n.train(training_iter_time, tracking_window, 10);
    exit(0);

#endif
}
